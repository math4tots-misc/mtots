import a._ggez


class Color {
    [opaque, r, g, b, a]

    static def __call(r, g, b, a=1.0) = {
        opaque = _ggez::new_color(r, g, b, a)
        __malloc(Color, [opaque, r, g, b, a])
    }

    def scale(self, r) = Color(
        self.r * r,
        self.g * r,
        self.b * r,
        self.a,
    )
}

BLACK = Color(0, 0, 0)
WHITE = Color(1, 1, 1)
RED = Color(1, 0, 0)
GREEN = Color(0, 1, 0)
BLUE = Color(0, 0, 1)

class Context {
    [opaque]

    def size(self) = _ggez::ctx_size(self.opaque)

    def fps(self) = _ggez::ctx_fps(self.opaque)

    def quit(self) = _ggez::ctx_quit(self.opaque)
}

trait Drawable {
    def draw(self, ctx, dest=nil, rotation=nil, scale=nil, offset=nil) = {
        # Draws the given drawable to the screen
        #   ctx: Context object
        #   dest: [x, y] pair indicating destination to draw to (defaults to [0, 0])
        #   rotation: orientation of the graphic in radians (defaults to 0)
        #   scale: [x, y] scale factors (defaults to [1, 1])
        #   offset: offset from the center for transform operations like scale/rotation
        #     [0, 0] meaning upper left corner, and [1, 1] meaning the lower right.
        #     The Rust ggez library defaults this value to [0, 0], but
        #     for convenience, this method defaults this value to [0.5, 0.5]
        if dest is nil { dest = [0, 0] }
        if rotation is nil { rotation = 0 }
        if scale is nil { scale = [1, 1] }
        if offset is nil { offset = [0.5, 0.5] }
        _ggez::ctx_draw(ctx.opaque, self.opaque, dest, rotation, scale, offset)
    }
}

class MeshBuilder {
    [opaque]

    static def __call() = {
        __malloc(MeshBuilder, [_ggez::new_mesh_builder()])
    }

    def circle(self, center, radius, color, tolerance=2.0) = {
        _ggez::mesh_builder_circle(self.opaque, center, radius, tolerance, color.opaque)
        self
    }

    def polygon(self, points, color) = {
        """
        NOTE: The points must be given in clockwise order!
        """
        _ggez::mesh_builder_polygon(self.opaque, points, color.opaque)
        self
    }

    def rect(self, x, y, width, height, color) = {
        self.polygon(
            [
                [x, y],
                [x + width, y],
                [x + width, y + height],
                [x, y + height],
            ],
            color,
        )
    }

    def build(self, ctx) = {
        Mesh(_ggez::mesh_builder_build(self.opaque, ctx.opaque))
    }
}

class Mesh(Drawable) {
    [opaque]
}

trait BaseText(Drawable) {
    def width(self, ctx) = _ggez::text_width(self.opaque, ctx.opaque)
    def height(self, ctx) = _ggez::text_height(self.opaque, ctx.opaque)
}

class SimpleText(BaseText) {
    [opaque]

    static def __call(text, color=nil, scale=nil) = {
        __malloc(SimpleText, [_ggez::new_text_simple(text, color, scale)])
    }
}

get_all_keycodes = _ggez::get_all_keycodes

_app_info_keys = [
    :name,
    :author,
    :sleep_per_frame,
]

_app_callback_keys = [
    :update,
    :draw,
    :mouse_down,
    :key_down,
    :text_input,
    :gamepad_button_down,
    :gamepad_axis,
]

class App {
    [_info_table, _callback_table]

    static def __call(name='name', author='author', sleep_per_frame=nil, **kwargs) = {
        info_table = Table(
            name=name,
            author=author,
            sleep_per_frame=sleep_per_frame,
        )
        callback_table = (
            _app_callback_keys
                .map(def(key) = [key, Cell(kwargs.get(key, nil))])
                .to(Table)
        )

        "Ensure there are no extraneous fields"
        assert_eq(callback_table.len(), (kwargs + callback_table).len())

        __malloc(App, [info_table, callback_table])
    }

    def update(self, **kwargs) = {
        """
        Replace all the callbacks for an app.
        Any callback that's not specified will be set to nil.
        """
        for key in _app_callback_keys {
            self._callback_table.get(key).set(kwargs.get(key, nil))
        }
    }

    def main(self) {
        """
        Starts the ggez event loop
        """
        _ggez::start(
            context_class=Context,
            **self._info_table.merge(
                _app_callback_keys.map(def(key) = {
                    [key, self._callback_table.get(key)]
                })
                .to(Table)
            )
        )
    }
}
