r###"
Model of an android project
"###
import fs
import os
import time

_template_dir = __file.parent().join('templates')

class SDK {
    r###"
    Logically wraps the Android SDK
    "###
    [android_sdk_path]

    static def __call(android_sdk_path) = {
        "Do some minimal validity check on the sdk path"
        path = Path(android_sdk_path)
        assert(path.is_dir())
        __malloc(SDK, [path])
    }

    def _emulator(self) = self.android_sdk_path.join('emulator', 'emulator')

    def _adb(self) = self.android_sdk_path.join('platform-tools', 'adb')

    def _gradlew(self, project_path) = {
        if os::name == "windows" {
            """
            process::Command can't really deal with UNC paths...
            So as a workaround, just strip the prefix for now
            """
            path_str = str(project_path.canon())
            path_str = path_str.lstrip(r'\\?\')
            path_str + r'\gradlew.bat'
        } else {
            project_path.canon().join('gradlew')
        }
    }

    def materialize(self, outpath, project) {
        """
        Materialize an android project to the given path
        """
        fs::copy(_template_dir.join('base'), outpath)
    }

    def build(self, project_path) {
        r###"
        Builds the android app at the given path
        "###
        os::run(
            self._gradlew(project_path),
            ['build'],
            dir=project_path,
        )
    }

    def install(self, project_path) {
        r###"
        Installs the android app at the given path
        "###
        os::run(
            self._gradlew(project_path),
            ['installDebug'],
            dir=project_path,
        )
    }

    def _start_emulator(self) = {
        os::run(
            self._emulator(),
            ['-avd', 'Nexus_5X_API_28_x86', '-port', '5554'],
            stdout=:null,
            stderr=:null,
        )
        self._wait_for_emulator_ready()
    }

    def _wait_for_emulator_ready(self) {
        os::run(self._adb(), ['wait-for-device'])
    }

    def _emulator_started(self) = {
        [_status, stdout, _stderr] = os::run(
            self._adb(),
            ['devices', '-l'],
            stdout=:pipe,
            encoding=:utf8,
        )
        stdout.trim().lines().list().len() > 1
    }

    def start_emulator(self) = {
        "Checks if emulator is started, if not, start it"
        if self._emulator_started() {
            self._wait_for_emulator_ready()
            nil
        } else {
            self._start_emulator()
        }
    }
}

class Project {
    r###"
    An android project consists of a few parts:
        manifest:
            Logically represents AndroidManifest.xml
        src:
            The Java/Kotlin files under src/java
            (it seems like even kotlin files live under src/java)
        res:
            the res/ directory in an Android project

    Note that the Project object does not contain any system
    specific information (e.g. path to the Android SDK).
    This system information is also necessary to actually materialize
    and build an Android project.
    "###
    [manifest, src, res]
}

class Manifest {
}
