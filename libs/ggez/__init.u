import _ggez


class Color {
    [opaque]

    static def __call(r, g, b, a=1.0) = {
        opaque = _ggez::new_color(r, g, b, a)
        __malloc(Color, [opaque])
    }
}

BLACK = Color(0, 0, 0)
WHITE = Color(1, 1, 1)
RED = Color(1, 0, 0)
GREEN = Color(0, 1, 0)
BLUE = Color(0, 0, 1)

class Context {
    [opaque]

    static def __call(opaque) = {
        __malloc(Context, [opaque])
    }

    def size(self) = _ggez::size(self.opaque)
}

class MeshBuilder {
    [opaque]

    static def __call() = {
        __malloc(MeshBuilder, [_ggez::new_mesh_builder()])
    }

    def circle(self, center, radius, color) = {
        _ggez::mesh_builder_circle(self.opaque, center, radius, color.opaque)
        self
    }

    def build(self, ctx) = {
        Drawable(_ggez::mesh_builder_build(self.opaque, ctx.opaque))
    }
}

class Drawable {
    [opaque]

    static def __call(opaque) = __malloc(Drawable, [opaque])

    def draw(self, ctx, dest=nil) = {
        dest = dest or [0, 0]
        _ggez::draw(ctx.opaque, self.opaque, dest)
    }
}

def main(
    name="name",
    author="author",
    sleep_per_frame=nil,
    init=nil,
    update=nil,
    draw=nil,
    mouse_down=nil,
    text_input=nil,
) = {
    _ggez::start(
        name=name,
        author=author,
        sleep_per_frame=sleep_per_frame,
        init=if init is nil { nil } else { def(ctx) = init(Context(ctx)) },
        update=if update is nil { nil } else { def(ctx) = update(Context(ctx)) },
        draw=if draw is nil { nil } else { def(ctx) = draw(Context(ctx)) },
        mouse_down=if mouse_down is nil { nil } else { def(ctx, *args) = mouse_down(Context(ctx), *args) },
        text_input=if text_input is nil { nil } else { def(ctx, *args) = text_input(Context(ctx), *args) },
    )
}

def demo() = {
    import time

    width = 0
    height = 0
    x = 0
    y = 0
    last_tick_time = nil

    main(
        name="demo",
        init=def(ctx) {
            nonlocal x, y, width, height
            [width, height] = ctx.size()
            x = width / 2
            y = height / 2
            print('init, size -> ' + str(ctx.size()))
        },
        update=def(ctx) {
            nonlocal last_tick_time, y

            now = time::now()
            last_tick_time = if last_tick_time is nil { now } else { last_tick_time }

            if now - last_tick_time > .4 {
                y = min(y + 20, height - 40)
                last_tick_time = now
            }
        },
        draw=def(ctx) {
            MeshBuilder().circle([40, 40], 40, BLUE).build(ctx).draw(ctx)
            MeshBuilder().circle([width - 40, height - 40], 40, RED).build(ctx).draw(ctx)
            (
                MeshBuilder()
                    .circle([width - 40, 40], 40, GREEN)
                    .circle([40, height - 40], 40, WHITE)
                    .build(ctx)
                    .draw(ctx)
            )
            MeshBuilder().circle([0, 0], 40, BLUE).build(ctx).draw(ctx, [x, y])
        },
        mouse_down=def(ctx, button, cx, cy) = {
            nonlocal x, y
            print('button = %s, cx = %s, cy = %s' % [button, cx, cy])
            if button == :left {
                x = cx
                y = cy
            }
        },
        text_input=def(ctx, c) = {
            nonlocal x, y
            print('text_input c = %s' % [c])
            if c == 'a' {
                x = x - 40
            } elif c == 'd' {
                x = x + 40
            } elif c == 'w' {
                y = y - 40
            } elif c == 's' {
                y = y + 40
            }
        },
    )
}
