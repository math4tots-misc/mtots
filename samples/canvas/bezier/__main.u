import a.canvas

class Delegate(canvas.Delegate) {
    new(cv) = {
        print('init with %r' % [cv])

        # cv.fullscreen = true
        cv.draw(def(b) {
            b.font = '50px sans-serif'
            b.fillText('Hello', 50, 50)
            b.strokeText('Hello', 250, 50)
        })

        (async def {
            text = 'Hello'
            print('Measured text (%r) = %r' % [
                text,
                cv.measureText(text).await,
            ])
            print('miterLimit = %r' % [
                cv.miterLimit.await,
            ])
            print('getLineDash() = %r' % [
                cv.getLineDash().await
            ])
            cv.draw(def(b) {
                b.setLineDash([2, 2, 2])
                b.strokeText('Hello', 250, 250)
            })
        })().ordie()

        new(down=false, nclicks=0, cp1=nil, cp2=nil)
    }
    def resize(self, width, height) = {
        print('resize %r' % [[width, height]])
    }
    def click(self, btn, x, y) = {
        print('click %r, %r, %r' % [btn, x, y])
        # cv.fillRect(x, y, 10, 10)
        switch self.nclicks % 4 {
            0 => {
                cv.draw(def(b) {
                    b.beginPath()
                    b.moveTo(x, y)
                    b.save()
                    b.fillStyle = 'orange'
                    b.fillRect(x, y, 10, 10)
                    b.restore()
                })
            }
            1 => {
                self.cp1 = [x, y]
                cv.draw(def(b) {
                    b.save()
                    b.fillStyle = 'teal'
                    b.fillRect(x, y, 10, 10)
                    b.restore()
                })
            }
            2 => {
                self.cp2 = [x, y]
                cv.draw(def(b) {
                    b.save()
                    b.fillStyle = 'magenta'
                    b.fillRect(x, y, 10, 10)
                    b.restore()
                })
            }
            3 => {
                cv.draw(def(b) {
                    b.save()
                    b.fillStyle = 'navy'
                    b.fillRect(x, y, 10, 10)
                    b.restore()
                    [cp1x, cp1y] = self.cp1
                    [cp2x, cp2y] = self.cp2
                    b.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)
                    b.stroke()
                })
            }
        }
        self.nclicks = (self.nclicks + 1) % 4
    }
    async def keydown(self, key, mods) {
        print('keydown %r %r' % [key, mods])
        switch key {
            'Escape' => cv.exit()
            'f' => print('fillStyle = %r' % [cv.fillStyle.await])
            'y' => cv.fillStyle = 'yellow'
            'g' => cv.fillStyle = 'green'
            'b' => cv.fillStyle = 'black'
            'r' => cv.fillStyle = 'red'
            'd' => {
                print('dimensions = [%r, %r]' % [
                    cv.width.await,
                    cv.height.await,
                ])
            }
        }
    }
    def keyup(self, key, mods) {
        print('keyup %r %r' % [key, mods])
    }
}

print('before run')
cv = canvas.init(
    title = 'canvas sample',
    resizable = true,
    # frameless = true,
    delegatecls = Delegate,
)
cv.run()
