import a.canvas

class Foo {
    new(x, y, dx, dy, w, h) = new(x=x, y=y, dx=dx, dy=dy, w=w, h=h)
    def update(self, dt) = {
        self.x = (self.x + dt * self.dx) %% self.w
        self.y = (self.y + dt * self.dy) %% self.h
    }
}

class X2 {
    new(x, y, dx, dy, ax, ay, w, h) = new(x=x, y=y, dx=dx, dy=dy, ax=0, ay=0, w=w, h=h)
    def update(self, dt) = {
        self.dx += dt * self.ax
        self.dy += dt * self.ay
        self.x = (self.x + dt * self.dx) %% self.w
        self.y = (self.y + dt * self.dy) %% self.h
    }
}

last_print = nil

class Delegate(canvas.Delegate) {
    static async def __call(cv) = {
        width = cv.width.await
        height = cv.height.await
        new(
            pos=Foo(
                width / 2,
                height / 2,
                60,
                60,
                width,
                height,
            ),
            pos2=X2(
                width * 3 / 4,
                height * 3 / 4,
                0,
                0,
                0,
                0,
                width,
                height,
            ),
            last_tick=nil,
            width=width,
            height=height,
            rectFillStyle='#FFFFFF',
        )
    }
    def tick(self, ts) {
        nonlocal last_print
        # print('tick start')
        if last_print is nil or (ts - last_print) > 1000 {
            print('tick %r' % [ts])
            last_print = ts
        }
        if self.last_tick is nil {
            self.last_tick = ts
        }
        dt = ts - self.last_tick
        pos = self.pos
        pos2 = self.pos2

        pos.update(dt / 1000)
        pos2.update(dt / 1000)
        # print('pos.x = %r, pos.y = %r' % [pos.x, pos.y])

        b = cv.batch()
        b.fillStyle = '#000000'
        b.fillRect(0, 0, self.width, self.height)
        b.fillStyle = '#FFFFFF'
        b.fillRect(pos.x - 5, pos.y - 5, 10, 10)
        b.fillStyle = self.rectFillStyle
        b.fillRect(pos2.x - 10, pos2.y - 10, 20, 20)
        r = b.run().ordie()

        self.last_tick = ts
    }
    def click(self, btn, x, y) {
        self.pos2.x = x
        self.pos2.y = y
    }
    def keydown(self, key, mods) {
        if key == 'Escape' {
            cv.exit()
        }
    }
    def gamepadaxis(self, gid, axis, state) {
        print('dx,dy %r,%r' % [self.pos2.ax, self.pos2.ay])
        if abs(state) < 0.2 {
            state = 0
        }
        switch axis {
            0 => self.pos2.ax = state * 1000
            1 => self.pos2.ay = state * 1000
        }
    }
    def gamepadbtn(self, gid, btn, state) {
        if state {
            self.rectFillStyle = switch btn {
                0 => 'green'
                1 => 'red'
                2 => 'blue'
                3 => 'yellow'
                => {
                    print('btn %r %r' % [btn, state])
                    'white'
                }
            }
        }
    }
}

print('before init')
cv = canvas.init(
    title = 'tick sample',
    delegatecls = Delegate,
)
cv.run()
