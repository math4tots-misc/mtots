import a.canvas

class Delegate(canvas.Delegate) {
    new() = {
        print('init with %r' % [cv])

        # cv.fullscreen = true
        cv.font = '50px sans-serif'
        cv.fillText('Hello', 50, 50)
        cv.strokeText('Hello', 250, 50)

        (async def {
            text = 'Hello'
            print('Measured text (%r) = %r' % [
                text,
                await cv.measureText(text),
            ])
            print('miterLimit = %r' % [
                await cv.miterLimit,
            ])
            print('getLineDash() = %r' % [
                await cv.getLineDash()
            ])
            cv.setLineDash([2, 2, 2])
            cv.strokeText('Hello', 250, 250)
        })().ordie()

        new()
    }
    def resize(self, width, height) = {
        print('resize %r' % [[width, height]])
    }
    def click(self, btn, x, y) = {
        print('click %r, %r, %r' % [btn, x, y])
        cv.fillRect(x, y, 10, 10)
    }
    def mousemove(self, x, y) {
        cv.fillRect(x, y, 10, 10)
    }
    async def keydown(self, key, mods) {
        print('keydown %r %r' % [key, mods])
        switch key {
            'Escape' => cv.exit()
            'f' => print('fillStyle = %r' % [await cv.fillStyle])
            'y' => cv.fillStyle = 'yellow'
            'g' => cv.fillStyle = 'green'
            'b' => cv.fillStyle = 'black'
            'r' => cv.fillStyle = 'red'
            'd' => {
                print('dimensions = [%r, %r]' % [
                    await cv.width,
                    await cv.height,
                ])
            }
        }
    }
    def keyup(self, key, mods) {
        print('keyup %r %r' % [key, mods])
    }
    def mousedown(self, btn, x, y) {
        print('mousedown %r %r %r' % [btn, x, y])
    }
}

print('before run')
cv = canvas.init(
    title = 'canvas sample',
    resizable = true,
    # frameless = true,
    delegatecls = Delegate,
)
cv.run()
