import a.json
from ..b2d import Batch2D

class Canvas2DMixin {
    # Wraps the HTML5 canvas 2D API, largely following the methods on
    # CanvasRenderingContext2D as documented here:
    # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    #
    # Almost all values here are async, as the returned value needs to
    # make a round trip to and from the webview.
    #
    # Only read methods are available here -- for actual drawing, see
    # the 'batch()' method on Canvas and the Batch2D class.
    #

    def batch(self) = Batch2D(self)

    def draw(self, f) = {
        b = self.batch()
        f(b)
        b.run()
    }

    # Drawing Text
    async def measureText(self, text) = {
        self.evalj('measureText(%r)' % [text]).await
    }

    # Line styles
    async def __get_lineWidth(self) = float(self.evals('ctx.lineWidth').await)
    async def __get_lineCap(self) = self.evals('ctx.lineCap').await
    async def __get_lineJoin(self) = self.evals('ctx.lineJoin').await
    async def __get_miterLimit(self) = float(self.evals('ctx.miterLimit').await)
    async def getLineDash(self) = self.evalj('ctx.getLineDash()').await
    async def __get_lineDashOffset(self) = {
        float(self.evals('ctx.lineDashOffset').await)
    }

    # Text styles
    async def __get_font(self) = self.evals('ctx.font').await
    async def __get_textAlign(self) = self.evals('ctx.textAlign').await
    async def __get_textBaseline(self) = self.evals('ctx.textBaseline').await
    async def __get_direction(self) = self.evals('ctx.direction').await

    # Fill and stroke styles
    async def __get_fillStyle(self) = self.evals('ctx.fillStyle').await
    async def __get_strokeStyle(self) = self.evals('ctx.strokeStyle').await
}
