import a.json

class Canvas2DMixin {
    # Wraps the HTML5 canvas 2D API, largely following the methods on
    # CanvasRenderingContext2D as documented here:
    # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    #
    # Any method that returns a value is async, as the returned value needs to
    # make a round trip to and from the webview.

    # Drawing rectangles
    def clearRect(self, x, y, width, height) {
        self._eval('ctx.clearRect(%r, %r, %r, %r)' % [x, y, width, height])
    }
    def fillRect(self, x, y, width, height) {
        self._eval('ctx.fillRect(%r, %r, %r, %r)' % [x, y, width, height])
    }
    def strokeRect(self, x, y, width, height) {
        self._eval('ctx.strokeRect(%r, %r, %r, %r)' % [x, y, width, height])
    }

    # Drawing Text
    def fillText(self, text, x, y) {
        self._eval('ctx.fillText(%r, %r, %r)' % [text, x, y])
    }
    def strokeText(self, text, x, y) {
        self._eval('ctx.strokeText(%r, %r, %r)' % [text, x, y])
    }
    async def measureText(self, text) = {
        await self._evaljson('measureText(%r)' % [text])
    }

    # Line styles
    async def __get_lineWidth(self) = float(await self._aeval('ctx.lineWidth'))
    def __set_lineWidth(self, width) {
        self._eval('ctx.lineWidth = %r' % [width])
    }
    async def __get_lineCap(self) = await self._aeval('ctx.lineCap')
    def __set_lineCap(self, cap) {
        # Type of endings on the end of lines.
        # Possible values: butt (default), round, square.
        self._eval('ctx.lineCap = %r' % [cap])
    }
    async def __get_lineJoin(self) = await self._aeval('ctx.lineJoin')
    def __set_lineJoin(self, cap) {
        # Defines the type of corners where two lines meet.
        # Possible values: round, bevel, miter (default).
        self._eval('ctx.lineJoin = %r' % [cap])
    }
    async def __get_miterLimit(self) = float(await self._aeval('ctx.miterLimit'))
    def __set_miterLimit(self, cap) {
        # Miter limit ratio. Default 10.
        self._eval('ctx.miterLimit = %r' % [cap])
    }
    async def getLineDash(self) = await self._evaljson('ctx.getLineDash()')
    def setLineDash(self, segments) {
        self._eval('ctx.setLineDash(%s)' % [json.dumps(segments)])
    }
    async def __get_lineDashOffset(self) = {
        float(await self._aeval('ctx.lineDashOffset'))
    }
    def __set_lineDashOffset(self, cap) {
        # Specifies where to start a dash array on a line.
        self._eval('ctx.lineDashOffset = %r' % [cap])
    }

    # Text styles
    async def __get_font(self) = await self._aeval('ctx.font')
    def __set_font(self, font) {
        font = str(font)
        self._eval('ctx.font = "%s"' % [font])
    }
    async def __get_textAlign(self) = await self._aeval('ctx.textAlign')
    def __set_textAlign(self, textAlign) {
        # Text alignment setting.
        # Possible values: start (default), end, left, right, center.
        textAlign = str(textAlign)
        self._eval('ctx.textAlign = "%s"' % [textAlign])
    }
    async def __get_textBaseline(self) = await self._aeval('ctx.textBaseline')
    def __set_textBaseline(self, textBaseline) {
        # Baseline alignment setting.
        # Possible values: top, hanging, middle, alphabetic (default),
        # ideographic, bottom.
        textBaseline = str(textBaseline)
        self._eval('ctx.textBaseline = "%s"' % [textBaseline])
    }
    async def __get_direction(self) = await self._aeval('ctx.direction')
    def __set_direction(self, direction) {
        # Directionality. Possible values: ltr, rtl, inherit (default).
        direction = str(direction)
        self._eval('ctx.direction = "%s"' % [direction])
    }

    # Fill and stroke styles
    def __set_fillStyle(self, fillStyle) {
        fillStyle = str(fillStyle)
        self._eval('ctx.fillStyle = "%s"' % [fillStyle])
    }
    async def __get_fillStyle(self) = await self._aeval('ctx.fillStyle')
    def __set_strokeStyle(self, strokeStyle) {
        strokeStyle = str(strokeStyle)
        self._eval('ctx.strokeStyle = "%s"' % [strokeStyle])
    }
    async def __get_strokeStyle(self) = await self._aeval('ctx.strokeStyle')

    # Paths
    def beginPath(self) = self._eval('ctx.beginPath()')
    def closePath(self) = self._eval('ctx.closePath()')
    def moveTo(self, x, y) = self._eval('ctx.moveTo(%r, %r)' % [x, y])
    def lineTo(self, x, y) = self._eval('ctx.lineTo(%r, %r)' % [x, y])
    def bezierCurveTo(self, cp1x, cp1y, cp2x, cp2y, x, y) {
        self._eval('ctx.bezierCurveTo(%r, %r, %r, %r, %r, %r)' % [
            cp1x, cp1y,
            cp2x, cp2y,
            x, y,
        ])
    }
    def quadraticCurveTo(self, cpx, cpy, x, y) {
        self._eval('ctx.quadraticCurveTo(%r, %r, %r, %r)' % [
            cpx, cpy,
            x, y,
        ])
    }
    def arc(self, x, y, radius, startAngle, endAngle, anticlockwise=false) {
        self._eval('ctx.arc(%r, %r, %r, %r, %r, %r)' % [
            x, y, radius, startAngle, endAngle, anticlockwise,
        ])
    }
    def arcTo(self, x1, y1, x2, y2, radius) {
        self._eval('ctx.arcTo(%r, %r, %r, %r, %r)' % [
            x1, y1, x2, y2, radius
        ])
    }
    def ellipse(
        self,
        x,
        y,
        radiusX,
        radiusY,
        rotation,
        startAngle,
        endAngle,
        anticlockwise=false,
    ) {
        self._eval('ctx.ellipse(%r, %r, %r, %r, %r, %r, %r, %r)' % [
            x,
            y,
            radiusX,
            radiusY,
            rotation,
            startAngle,
            endAngle,
            anticlockwise,
        ])
    }
    def rect(self, x, y, width, height) {
        self._eval('ctx.rect(%r, %r, %r, %r)' % [x, y, width, height])
    }

    # Drawing paths
    def fill(self, fillRule='nonzero') {
        fillRule = str(fillRule)
        self._eval('ctx.fill(%r)' % [fillRule])
    }
    def stroke(self) {
        self._eval('ctx.stroke()')
    }
    def clip(self) {
        self._eval('ctx.clip()')
    }
}
