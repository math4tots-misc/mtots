# JS Code snippet for adding event listeners
# and some useful global variables

CODE = r###"
<div id='misc' style="display:none;"></div>
<script>'use strict';
// event.repeat is unreliable
// (in particular, it doesn't work on windows)
// So we keep track keydown/keyup for each key to indicate
// whether it's repeating
const downKeys = {};
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
updateCanvasDim();
function newMouseButtonEventListener(type) {
    return function(event) {
        external.invoke(
            type +
            '/' +
            event.button +
            '/' +
            event.clientX +
            '/' +
            event.clientY);
        event.preventDefault();
    };
}
function mkke(name, event) {
    var ret = name + '/' + event.key + '/';
    var mods = [];
    if (event.altKey) {
        mods.push('alt');
    }
    if (event.ctrlKey) {
        mods.push('ctrl');
    }
    if (event.metaKey) {
        mods.push('meta');
    }
    if (downKeys[event.key]) {
        // event.repeat doesn't work on Windows
        mods.push('repeat');
    }
    if (event.shiftKey) {
        mods.push('shift');
    }
    return ret + mods.join(',');
}
function updateCanvasDim() {
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
}
window.addEventListener('resize', function() {
    updateCanvasDim();
    external.invoke('resize/' + canvas.width + '/' + canvas.height);
});
canvas.addEventListener('click', newMouseButtonEventListener('click'));
canvas.addEventListener('mousedown', newMouseButtonEventListener('mousedown'));
canvas.addEventListener('mouseup', newMouseButtonEventListener('mouseup'));
canvas.addEventListener('mousemove', function(event) {
    external.invoke('mousemove/' + event.clientX + '/' + event.clientY);
});
window.addEventListener('keydown', function(event) {
    external.invoke(mkke('keydown', event));
    downKeys[event.key] = true;
    event.preventDefault();
});
window.addEventListener('keyup', function(event) {
    downKeys[event.key] = false;
    external.invoke(mkke('keyup', event));
});
window.addEventListener('keypress', function(event) {
    external.invoke(mkke('keypress', event));
});
external.invoke('init');
function measureText(text) {
    const m = ctx.measureText(text);
    return {
        width: m.width,
        actualBoundingBoxLeft: m.actualBoundingBoxLeft,
        actualBoundingBoxRight: m.actualBoundingBoxRight,
        fontBoundingBoxAscent: m.fontBoundingBoxAscent,
        fontBoundingBoxDescent: m.fontBoundingBoxDescent,
        actualBoundingBoxAscent: m.actualBoundingBoxAscent,
        actualBoundingBoxDescent: m.actualBoundingBoxDescent,
        emHeightAscent: m.emHeightAscent,
        emHeightDescent: m.emHeightDescent,
        hangingBaseline: m.hangingBaseline,
        alphabeticBaseline: m.alphabeticBaseline,
        ideographicBaseline: m.ideographicBaseline,
    };
}
function asyncImageFromBlob(blob) {
    return new Promise(function(resolve, reject) {
        const img = document.createElement('img');
        img.onload = function() {
            resolve(img);
        };
        img.src = URL.createObjectURL(blob);
        external.invoke('debug/' + URL.createObjectURL(blob));
        external.invoke('debug/img.width=' + img.width + ',img.height=' + img.height);
        document.getElementById('misc').appendChild(img);
    });
}
function animate(timestamp) {
    requestAnimationFrame(animate);
    external.invoke('tick/' + timestamp);
}
requestAnimationFrame(animate);
</script>
"###
