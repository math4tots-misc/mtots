import a.json
from a.webview import JsRef

class Batch2D {
    # Wraps the HTML5 canvas 2D API, largely following the methods on
    # CanvasRenderingContext2D as documented here:
    # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    #
    # batches 2D drawing instructions so they can be executed all at once
    # on the JS side
    #
    new(canvas) = new(canvas=canvas, cmds=[])

    def cmd(self, js) {
        self.cmds.push(js)
    }
    async def run(self) = {
        cmds = self.cmds
        self.cmds = []
        cmds = ';'.join(del cmds)
        self.canvas.evalx('(function(){%s})()' % [cmds]).await
    }

    # Drawing rectangles
    def clearRect(self, x, y, width, height) {
        self.cmd('ctx.clearRect(%r,%r,%r,%r)' % [x, y, width, height])
    }
    def fillRect(self, x, y, width, height) {
        self.cmd('ctx.fillRect(%r,%r,%r,%r)' % [x, y, width, height])
    }
    def strokeRect(self, x, y, width, height) {
        self.cmd('ctx.strokeRect(%r,%r,%r,%r)' % [x, y, width, height])
    }

    # Drawing Text
    def fillText(self, text, x, y) {
        self.cmd('ctx.fillText(%r,%r,%r)' % [text, x, y])
    }
    def strokeText(self, text, x, y) {
        self.cmd('ctx.strokeText(%r,%r,%r)' % [text, x, y])
    }

    # Line styles
    def __set_lineWidth(self, width) {
        self.cmd('ctx.lineWidth=%r' % [width])
    }
    def __set_lineCap(self, cap) {
        # Type of endings on the end of lines.
        # Possible values: butt (default), round, square.
        self.cmd('ctx.lineCap=%r' % [cap])
    }
    def __set_lineJoin(self, cap) {
        # Defines the type of corners where two lines meet.
        # Possible values: round, bevel, miter (default).
        self.cmd('ctx.lineJoin=%r' % [cap])
    }
    def __set_miterLimit(self, cap) {
        # Miter limit ratio. Default 10.
        self.cmd('ctx.miterLimit=%r' % [cap])
    }
    def setLineDash(self, segments) {
        self.cmd('ctx.setLineDash(%s)' % [json.dumps(segments)])
    }
    def __set_lineDashOffset(self, cap) {
        # Specifies where to start a dash array on a line.
        self.cmd('ctx.lineDashOffset=%r' % [cap])
    }

    # Text styles
    def __set_font(self, font) {
        font = str(font)
        self.cmd('ctx.font="%s"' % [font])
    }
    def __set_textAlign(self, textAlign) {
        # Text alignment setting.
        # Possible values: start (default), end, left, right, center.
        textAlign = str(textAlign)
        self.cmd('ctx.textAlign="%s"' % [textAlign])
    }
    def __set_textBaseline(self, textBaseline) {
        # Baseline alignment setting.
        # Possible values: top, hanging, middle, alphabetic (default),
        # ideographic, bottom.
        textBaseline = str(textBaseline)
        self.cmd('ctx.textBaseline="%s"' % [textBaseline])
    }
    def __set_direction(self, direction) {
        # Directionality. Possible values: ltr, rtl, inherit (default).
        direction = str(direction)
        self.cmd('ctx.direction="%s"' % [direction])
    }

    # Fill and stroke styles
    def __set_fillStyle(self, fillStyle) {
        fillStyle = str(fillStyle)
        self.cmd('ctx.fillStyle="%s"' % [fillStyle])
    }
    def __set_strokeStyle(self, strokeStyle) {
        strokeStyle = str(strokeStyle)
        self.cmd('ctx.strokeStyle="%s"' % [strokeStyle])
    }

    # Paths
    def beginPath(self) = self.cmd('ctx.beginPath()')
    def closePath(self) = self.cmd('ctx.closePath()')
    def moveTo(self, x, y) = self.cmd('ctx.moveTo(%r,%r)' % [x, y])
    def lineTo(self, x, y) = self.cmd('ctx.lineTo(%r,%r)' % [x, y])
    def bezierCurveTo(self, cp1x, cp1y, cp2x, cp2y, x, y) {
        self.cmd('ctx.bezierCurveTo(%r,%r,%r,%r,%r,%r)' % [
            cp1x, cp1y,
            cp2x, cp2y,
            x, y,
        ])
    }
    def quadraticCurveTo(self, cpx, cpy, x, y) {
        self.cmd('ctx.quadraticCurveTo(%r,%r,%r,%r)' % [
            cpx, cpy,
            x, y,
        ])
    }
    def arc(self, x, y, radius, startAngle, endAngle, anticlockwise=false) {
        self.cmd('ctx.arc(%r,%r,%r,%r,%r,%r)' % [
            x, y, radius, startAngle, endAngle, anticlockwise,
        ])
    }
    def arcTo(self, x1, y1, x2, y2, radius) {
        self.cmd('ctx.arcTo(%r,%r,%r,%r,%r)' % [
            x1, y1, x2, y2, radius
        ])
    }
    def ellipse(
        self,
        x,
        y,
        radiusX,
        radiusY,
        rotation,
        startAngle,
        endAngle,
        anticlockwise=false,
    ) {
        self.cmd('ctx.ellipse(%r,%r,%r,%r,%r,%r,%r,%r)' % [
            x,
            y,
            radiusX,
            radiusY,
            rotation,
            startAngle,
            endAngle,
            anticlockwise,
        ])
    }
    def rect(self, x, y, width, height) {
        self.cmd('ctx.rect(%r,%r,%r,%r)' % [x, y, width, height])
    }

    # Drawing paths
    def fill(self, fillRule='nonzero') {
        self.cmd('ctx.fill(%r)' % [str(fillRule)])
    }
    def stroke(self) {
        self.cmd('ctx.stroke()')
    }
    def clip(self) {
        self.cmd('ctx.clip()')
    }

    # Transformations
    def rotate(self, angle) {
        self.cmd('ctx.rotate(%r)' % [float(angle)])
    }
    def scale(self, x, y) {
        self.cmd('ctx.scale(%r,%r)' % [float(x), float(y)])
    }
    def translate(self, x, y) {
        self.cmd('ctx.translate(%r,%r)' % [float(x), float(y)])
    }
    def setTransform(self, a, b, c, d, e, f) {
        self.cmd('ctx.setTransform(%r,%r,%r,%r,%r,%r)' % [a, b, c, d, e, f])
    }

    # Drawing images
    def drawImage(
            self,
            image,
            sx,
            sy,
            sWidth=nil,
            sHeight=nil,
            dx=nil,
            dy=nil,
            dWidth=nil,
            dHeight=nil,
    ) {
        # void ctx.drawImage(image, dx, dy);
        # void ctx.drawImage(image, dx, dy, dWidth, dHeight);
        # void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
        image = JsRef.name(image)
        if sWidth is nil {
            self.cmd('ctx.drawImage(%s,%s,%s)' % [image, sx, sy])
        } elif dx is nil {
            self.cmd(
                'ctx.drawImage(%s,%s,%s,%s,%s)' % [
                    image, sx, sy, sWidth, sHeight
                ]
            )
        } else {
            self.cmd(
                'ctx.drawImage(%s,%s,%s,%s,%s,%s,%s,%s,%s)' % [
                    image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight
                ]
            )
        }
    }

    # The canvas state
    def save(self) {
        self.cmd('ctx.save()')
    }
    def restore(self) {
        self.cmd('ctx.restore()')
    }
}
