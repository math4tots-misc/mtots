import a.webview
import a.json
import a.fs
from .tone import BatchTone
from .c2d import Canvas2DMixin
from .img import CanvasImageMixin

def _content() = {
    jsdir = fs.join(fs.dirname(__file), 'js')
    afreqsjs = fs.read(fs.join(jsdir, 'afreqs.js'))
    audiojs = fs.read(fs.join(jsdir, 'audio.js'))
    eventsjs = fs.read(fs.join(jsdir, 'events.js'))
    html_content = r###"
    <html>
        <head>
            <style>
                html, body, canvas {
                    margin: 0px;
                    padding: 0px;
                    width: 100%%;
                    height: 100%%;
                    overflow: hidden;
                }
                canvas {
                    position: absolute;
                    left: 0;
                    top: 0;
                }
                #canvasbg {
                    z-index: 0;
                }
                #canvas {
                    z-index: 1;
                }
            </style>
        </head>
        <body>
            <canvas id="canvasbg"></canvas>
            <canvas id="canvas"></canvas>
            <div id='misc' style="display:none;"></div>
            <script>%s</script>
            <script>%s</script>
            <script>%s</script>
            <script>%s</script>
        </body>
    </html>
    "### % [webview.JS_PRELUDE, afreqsjs, audiojs, eventsjs]
}

def app(delegatecls) {
    if $GetCallingModule == __main() {
        run(delegatecls, **[
            'title': getattr(delegatecls, 'title', nil),
            'size': getattr(delegatecls, 'size', nil),
            'resizable': getattr(delegatecls, 'resizable', nil),
            'debug': getattr(delegatecls, 'debug', nil),
            'frameless': getattr(delegatecls, 'frameless', nil),
        ])
    }
}

def run(*args, **kwargs) {
    cv = init(*args, **kwargs)
    cv.run()
}

def init(
    title = nil,
    size = nil,
    resizable = nil,
    debug = nil,
    frameless = nil,
    delegatecls = nil,
) = {
    title = nil.get(title, '')
    size = nil.get(size, [800, 600])
    resizable = nil.get(resizable, false)
    debug = nil.get(debug, false)
    frameless = nil.get(frameless, false)

    delegate = nil
    cv = Canvas(webview.init(
        title = title,
        content = _content(),
        size = size,
        resizable = resizable,
        debug = debug,
        frameless = frameless,
        handler = def(arg) {
            nonlocal delegate
            parts = arg.split('/').list()
            cmd = parts[0]

            switch cmd {
                'init' => {
                    d = delegatecls(cv)
                    if type(d) is Promise {
                        (async def {
                            nonlocal delegate
                            delegate = WrappingDelegate(d.await, cv)
                        })().ordie()
                    } else {
                        delegate = WrappingDelegate(d, cv)
                    }
                    return
                }
                'debug' => {
                    print(arg)
                    return
                }
            }

            if delegate is nil {
                # Delegate isn't ready to handle events yet
                return
            }

            switch cmd {
                'tick' => {
                    if type(delegate.tick(float(parts[1])/1000)) is Promise {
                        throw(
                            "Due to time sensitive nature of tick(), " +
                            "the tick() method may not be async"
                        )
                    }
                }
                'click' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.click(int(btn), float(x), float(y)))
                }
                'mousemove' => {
                    [x, y] = parts[1:]
                    ordie(delegate.mousemove(float(x), float(y)))
                }
                'mousedown' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.mousedown(int(btn), float(x), float(y)))
                }
                'mouseup' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.mouseup(int(btn), float(x), float(y)))
                }
                'keydown' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keydown(key, mods))
                }
                'keyup' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keyup(key, mods))
                }
                'keypress' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keypress(key, mods))
                }
                'resize' => {
                    [width, height] = parts[1:].iter().map(float)
                    ordie(delegate.resize(width, height))
                }
                'gamepadbtn' => {
                    [gamepad_id, btn_id, state] = parts[1:].iter().map(float).list()
                    ordie(delegate.gamepadbtn(gamepad_id, btn_id, state))
                }
                'gamepadaxis' => {
                    [gamepad_id, axis_id, state] = parts[1:].iter().map(float).list()
                    ordie(delegate.gamepadaxis(gamepad_id, axis_id, state))
                }
                'gamepadconnected' => {
                    [gamepad_id] = parts[1:].iter().map(float).list()
                    ordie(delegate.gamepadconnected(gamepad_id))
                }
                => {
                    print('Unrecognized cmd %r' % [parts])
                }
            }
        },
    ), def(new_delegate) {
        nonlocal delegate
        if type(new_delegate) is Promise {
            delegate = nil
            (async def {
                nonlocal delegate
                delegate = WrappingDelegate(new_delegate.await, cv)
            })().ordie()
        } else {
            delegate = WrappingDelegate(new_delegate, cv)
        }
    })
}

class Canvas(Canvas2DMixin, CanvasImageMixin) {
    # Wraps the HTML5 canvas API, largely following the methods on
    # CanvasRenderingContext2D as documented here:
    # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    #
    # Any method that returns a value is async, as the returned value needs to
    # make a round trip to and from the webview.
    #

    new(wv, swap_delegate) = new(webview=wv, swap_delegate=swap_delegate, ctx=nil)

    async def ctx(self) = {
        if self.ctx == nil {
            self.ctx = self.webview.evalr('ctx').await
        }
        self.ctx
    }

    def tone(self) = BatchTone(self)

    def run(self) {
        self.webview.run()
    }

    def exit(self) {
        self.webview.exit()
    }

    def delegate(self, delegate) {
        (self.swap_delegate)(delegate)
    }

    def timeout(self, nsecs) = self.webview.timeout(nsecs)

    def __set_fullscreen(self, flag) {
        # Ugh, this doesn't seem to work consistently...
        # :/ setting fullscreen twice seems to work better?
        self.webview.set_fullscreen(flag)
        self.eval0('updateCanvasDim()')
        self.webview.set_fullscreen(flag)
        self.eval0('updateCanvasDim()')
    }

    def evals(self, js) = self.webview.evals(js)
    def eval0(self, js) = self.webview.eval0(js)
    def evalj(self, js) = self.webview.evalj(js)
    def evalr(self, js) = self.webview.evalr(js)
    def evalx(self, js) = self.webview.evalx(js)
    def evalp(self, js) = self.webview.evalp(js)

    async def __get_width(self) = float(self.evals('canvas.width').await)
    async def __get_height(self) = float(self.evals('canvas.height').await)
}

class Delegate {
    def tick(self, timestamp) = nil
    def resize(self, width, height) = nil
    def click(self, btn, x, y) = nil
    def mousemove(self, x, y) = nil
    def mousedown(self, btn, x, y) = nil
    def mouseup(self, btn, x, y) = nil
    def keydown(self, key, mods) = nil
    def keyup(self, key, mods) = nil
    def keypress(self, key, mods) = nil

    def gamepadconnected(self, gamepad_id) = nil
    def gamepadbtn(self, gamepad_id, btn, state) = nil
    def gamepadaxis(self, gamepad_id, axis, state) = nil
}

class WrappingDelegate {
    new(target, canvas) = new(
        target=target,
        canvas=canvas,
        hastick=hasmethod(type(target), 'tick'),
        hasresize=hasmethod(type(target), 'resize'),
        hasclick=hasmethod(type(target), 'click'),
        hasmousemove=hasmethod(type(target), 'mousemove'),
        hasmousedown=hasmethod(type(target), 'mousedown'),
        hasmouseup=hasmethod(type(target), 'mouseup'),
        haskeydown=hasmethod(type(target), 'keydown'),
        haskeyup=hasmethod(type(target), 'keyup'),
        haskeypress=hasmethod(type(target), 'keypress'),
        hasgamepadconnected=hasmethod(type(target), 'gamepadconnected'),
        hasgamepadbtn=hasmethod(type(target), 'gamepadbtn'),
        hasgamepadaxis=hasmethod(type(target), 'gamepadaxis'),
    )
    def tick(self, timestamp) = {
        if self.hastick {
            self.target.tick(timestamp)
        }
    }
    def resize(self, width, height) = {
        if self.hasresize {
            self.target.resize(width, height)
        }
    }
    def click(self, btn, x, y) = {
        if self.hasclick {
            self.target.click(btn, x, y)
        }
    }
    def mousemove(self, x, y) = {
        if self.hasmousemove {
            self.target.mousemove(x, y)
        }
    }
    def mousedown(self, btn, x, y) = {
        if self.hasmousedown {
            self.target.mousedown(btn, x, y)
        }
    }
    def mouseup(self, btn, x, y) = {
        if self.hasmouseup {
            self.target.mouseup(btn, x, y)
        }
    }
    def keydown(self, key, mods) = {
        if self.haskeydown {
            self.target.keydown(key, mods)
        } else {
            switch key {
                'Escape' => self.canvas.exit()
            }
        }
    }
    def keyup(self, key, mods) = {
        if self.haskeyup {
            self.target.keyup(key, mods)
        }
    }
    def keypress(self, key, mods) = {
        if self.haskeypress {
            self.target.keypress(key, mods)
        }
    }

    def gamepadconnected(self, gamepad_id) = {
        if self.hasgamepadconnected {
            self.target.gamepadconnected(gamepad_id)
        }
    }
    def gamepadbtn(self, gamepad_id, btn, state) = {
        if self.hasgamepadbtn {
            self.target.gamepadbtn(gamepad_id, btn, state)
        }
    }
    def gamepadaxis(self, gamepad_id, axis, state) = {
        if self.hasgamepadaxis {
            self.target.gamepadaxis(gamepad_id, axis, state)
        }
    }
}
