import a.webview

html_content = r###"
<html>
    <head>
        <style>
            html, body, canvas {
                margin: 0px;
                padding: 0px;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
        </style>
    </head>
    <body>
        <canvas id="canvas"></canvas>
        <script>
            // event.repeat is unreliable
            // (in particular, it doesn't work on windows)
            // So we keep track keydown/keyup for each key to indicate
            // whether it's repeating
            const downKeys = {};
            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            function newMouseButtonEventListener(type) {
                return function(event) {
                    external.invoke(
                        type +
                        '/' +
                        event.button +
                        '/' +
                        event.clientX +
                        '/' +
                        event.clientY);
                    event.preventDefault();
                };
            }
            function mkke(name, event) {
                var ret = name + '/' + event.key + '/';
                var mods = [];
                if (event.altKey) {
                    mods.push('alt');
                }
                if (event.ctrlKey) {
                    mods.push('ctrl');
                }
                if (event.metaKey) {
                    mods.push('meta');
                }
                if (downKeys[event.key]) {
                    // event.repeat doesn't work on Windows
                    mods.push('repeat');
                }
                if (event.shiftKey) {
                    mods.push('shift');
                }
                return ret + mods.join(',');
            }
            canvas.addEventListener('click', newMouseButtonEventListener('click'));
            canvas.addEventListener('mousedown', newMouseButtonEventListener('mousedown'));
            canvas.addEventListener('mouseup', newMouseButtonEventListener('mouseup'));
            canvas.addEventListener('mousemove', function(event) {
                external.invoke('mousemove/' + event.clientX + '/' + event.clientY);
            });
            window.addEventListener('keydown', function(event) {
                external.invoke(mkke('keydown', event));
                downKeys[event.key] = true;
            });
            window.addEventListener('keyup', function(event) {
                downKeys[event.key] = false;
                external.invoke(mkke('keyup', event));
            });
            window.addEventListener('keypress', function(event) {
                external.invoke(mkke('keypress', event));
            });
            external.invoke('init')
        </script>
    </body>
</html>
"###


def run(
    title = '',
    size = [800, 600],
    delegatecls = nil,
) {
    delegate = nil
    webview.run(
        title = title,
        content = html_content,
        size = size,
        handler = def(wv, arg) {
            nonlocal delegate
            parts = arg.split('/').list()
            canvas = Canvas(wv, def(h) {
                nonlocal delegate
                delegate = h
            })
            switch parts[0] {
                'init' => {
                    delegate = delegatecls(canvas)
                }
                'click' => {
                    [btn, x, y] = parts[1:]
                    delegate.click(canvas, int(btn), float(x), float(y))
                }
                'mousemove' => {
                    [x, y] = parts[1:]
                    delegate.mousemove(canvas, float(x), float(y))
                }
                'mousedown' => {
                    [btn, x, y] = parts[1:]
                    delegate.mousedown(canvas, int(btn), float(x), float(y))
                }
                'mouseup' => {
                    [btn, x, y] = parts[1:]
                    delegate.mouseup(canvas, int(btn), float(x), float(y))
                }
                'keydown' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    delegate.keydown(canvas, key, mods)
                }
                'keyup' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    delegate.keyup(canvas, key, mods)
                }
                'keypress' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    delegate.keypress(canvas, key, mods)
                }
                => {
                    print('Unrecognized cmd %r' % [parts])
                }
            }
        },
    )
}

class Canvas {
    new(wv, swap_handler) = new(webview=wv, swap_handler=swap_handler)

    def change_delegate(self, delegatecls) {
        delegate = delegatecls(self)
        (self.swap_handler)(delegate)
    }

    def clear_rect(self, x, y, width, height) {
        self.webview.eval('ctx.clearRect(%r, %r, %r, %r)' % [x, y, width, height])
    }

    def fill_rect(self, x, y, width, height) {
        self.webview.eval('ctx.fillRect(%r, %r, %r, %r)' % [x, y, width, height])
    }
}

class Delegate {
    def click(self, cv, btn, x, y) = nil
    def mousemove(self, cv, x, y) = nil
    def mousedown(self, cv, btn, x, y) = nil
    def mouseup(self, cv, btn, x, y) = nil
    def keydown(self, cv, key, mods) = nil
    def keyup(self, cv, key, mods) = nil
    def keypress(self, cv, key, mods) = nil
}
