import a.webview
import a.json
import .htmlevents
from .c2d import Canvas2DMixin

html_content = r###"
<html>
    <head>
        <style>
            html, body, canvas {
                margin: 0px;
                padding: 0px;
                width: 100%%;
                height: 100%%;
                overflow: hidden;
            }
        </style>
    </head>
    <body>
        <canvas id="canvas"></canvas>
        <script>%s</script>
        <script>%s</script>
    </body>
</html>
"### % [webview.JS_PRELUDE, htmlevents.CODE]


def init(
    title = '',
    size = [800, 600],
    resizable = false,
    debug = false,
    frameless = false,
    delegatecls = nil,
) = {
    delegate = nil
    Canvas(webview.init(
        title = title,
        content = html_content,
        size = size,
        resizable = resizable,
        debug = debug,
        frameless = frameless,
        handler = def(arg) {
            nonlocal delegate
            parts = arg.split('/').list()
            switch parts[0] {
                'init' => {
                    delegate = delegatecls()
                }
                'click' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.click(int(btn), float(x), float(y)))
                }
                'mousemove' => {
                    [x, y] = parts[1:]
                    ordie(delegate.mousemove(float(x), float(y)))
                }
                'mousedown' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.mousedown(int(btn), float(x), float(y)))
                }
                'mouseup' => {
                    [btn, x, y] = parts[1:]
                    ordie(delegate.mouseup(int(btn), float(x), float(y)))
                }
                'keydown' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keydown(key, mods))
                }
                'keyup' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keyup(key, mods))
                }
                'keypress' => {
                    [key, mods] = parts[1:]
                    mods = mods.split(',').list()
                    ordie(delegate.keypress(key, mods))
                }
                'resize' => {
                    [width, height] = parts[1:]
                    ordie(delegate.resize(width, height))
                }
                => {
                    print('Unrecognized cmd %r' % [parts])
                }
            }
        },
    ), def(new_delegate) {
        nonlocal delegate
        delegate = new_delegate
    })
}

class Canvas(Canvas2DMixin) {
    # Wraps the HTML5 canvas API, largely following the methods on
    # CanvasRenderingContext2D as documented here:
    # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    #
    # Any method that returns a value is async, as the returned value needs to
    # make a round trip to and from the webview.
    #

    new(wv, swap_delegate) = new(webview=wv, swap_delegate=swap_delegate)

    def run(self) {
        self.webview.run()
    }

    def exit(self) {
        self.webview.exit()
    }

    def delegate(self, delegatecls) {
        delegate = delegatecls()
        (self.swap_delegate)(delegate)
    }

    def __set_fullscreen(self, flag) {
        # Ugh, this doesn't seem to work consistently...
        # :/ setting fullscreen twice seems to work better?
        self.webview.set_fullscreen(flag)
        self._eval('updateCanvasDim()')
        self.webview.set_fullscreen(flag)
        self._eval('updateCanvasDim()')
    }

    def _aeval(self, js) = self.webview.async_eval(js)
    def _eval(self, js) = self.webview.eval(js)
    async def _evaljson(self, js) = {
        s = await self._aeval('JSON.stringify(%s)' % [js])
        json.loads(s)
    }

    async def __get_width(self) = await self._aeval('canvas.width')
    async def __get_height(self) = await self._aeval('canvas.height')
}

class Delegate {
    def resize(self, width, height) = nil
    def click(self, btn, x, y) = nil
    def mousemove(self, x, y) = nil
    def mousedown(self, btn, x, y) = nil
    def mouseup(self, btn, x, y) = nil
    def keydown(self, key, mods) = nil
    def keyup(self, key, mods) = nil
    def keypress(self, key, mods) = nil
}
