import a.canvas
from .model import Board
from .model import Piece
from .model import Tetris
import .draw
import .pause

NROWS = 24
NCOLS = 10
BOARD_SCALE = 30
CWIDTH = NCOLS * BOARD_SCALE * 2
CHEIGHT = NROWS * BOARD_SCALE

class Delegate(canvas.Delegate) {
    new(cv) = {
        new(
            cv=cv,
            last_step=nil,
            model=Tetris(nrows=NROWS,ncols=NCOLS),
        )
    }

    def keydown(self, key, mods) {
        switch key {
            'Escape' | 'GamepadView' => self.cv.delegate(pause.Delegate(self.cv, self))
            'a' | 'ArrowLeft' | 'GamepadDPadLeft' | 'GamepadLeftThumbstickLeft' => {
                self.model.move_piece(0, -1)
            }
            'd' | 'ArrowRight' | 'GamepadDPadRight' | 'GamepadLeftThumbstickRight' => {
                self.model.move_piece(0, 1)
            }
            's' | 'ArrowDown' | 'GamepadDPadDown' | 'GamepadLeftThumbstickDown' => {
                self.model.move_piece(1, 0)
            }
            'w' |
            'ArrowUp' |
            'GamepadDPadUp' |
            'GamepadLeftThumbstickUp' |
            'GamepadA' => {
                self.model.rotate_piece(1)
            }
            ' ' | 'GamepadY' => {
                t = self.cv.tone()
                # t.triggerAttackRelease('C6', '8n')
                # t.triggerAttackRelease('A4', '8n')
                t.seq(['C6', 'A4'], '12t')
                t.run()
                self.model.hard_drop()
            }
            => print('keydown %r' % [[key, mods]])
        }
    }

    def gamepadbtn(self, gid, btn, state) {
        print('gamepadbtn %r %r %r' % [gid, btn, state])
    }

    def tick(self, ts) {
        if self.last_step is nil or ts - self.last_step >= self.model.step_time {
            self.model.step()
            self.last_step = ts
        }

        b = self.cv.batch()

        b.fillStyle = 'blue'
        b.fillRect(CWIDTH / 2, 0, CWIDTH / 2, CHEIGHT)

        b.save()
        b.scale(BOARD_SCALE, BOARD_SCALE)
        draw.board(b, self.model.board)
        if self.model.piece is not nil {
            draw.piece(b, self.model.piece)
        }
        b.restore()
        b.run()
    }

    # def click(self, btn, x, y) {
    #     t = self.cv.tone()
    #     t.triggerAttackRelease('C4', '8n')
    #     t.run()
    # }
}

def main() {
    canvas.run(
        title = 'tetris',
        delegatecls = Delegate,
        size = [CWIDTH, CHEIGHT],
    )
}


if __name == __main() {
    main()
}
